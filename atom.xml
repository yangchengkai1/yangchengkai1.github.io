<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>yankai</title>
  
  <subtitle>悟已往之不谏，知来者之可追</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yangchengkai1.github.io/"/>
  <updated>2019-08-02T02:08:57.637Z</updated>
  <id>https://yangchengkai1.github.io/</id>
  
  <author>
    <name>Yang Chengkai</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JWT</title>
    <link href="https://yangchengkai1.github.io/2019/03/18/JWT/"/>
    <id>https://yangchengkai1.github.io/2019/03/18/JWT/</id>
    <published>2019-03-18T02:06:06.000Z</published>
    <updated>2019-08-02T02:08:57.637Z</updated>
    
    <content type="html"><![CDATA[<p>JWT使用总结<br><a id="more"></a> </p><h2 id="初步了解"><a href="#初步了解" class="headerlink" title="初步了解"></a>初步了解</h2><p>HTTP 的通信模型是短连接，一次请求结束，连接就中断了，对于 admin，每次发送请求都需要发送 Name 和 Password ，极其不方便，所以采用 JWT 验证。<br>项目使用的是 golang  的 gin 框架，在 GitHub 上有 gin-jwt，它是 gin 框架的中间件，提供 jwt 认证中间件，下一步就是要搞清楚怎么使用这个中间件。<br>用户在根据其身份凭证成功登陆时，返回用户标示符，服务器根据标示符，生成具有声明“以管理员身份登录”的 token，并将其提供给客户端。然后，客户端可以使用 token 来证明它以管理员身份登录。token 一般是放在 HTTP 请求的头信息 <code>Authorization</code>  中，不用额外发送其他信息，这样就不用每次访问都发送身份凭证。</p><p><a name="06358065"></a></p><h2 id="阅读样例及源码"><a href="#阅读样例及源码" class="headerlink" title="阅读样例及源码"></a>阅读<a href="https://github.com/appleboy/gin-jwt" target="_blank" rel="noopener">样例</a>及源码<br></h2><p><a name="4c968852"></a></p><h3 id="创建中间件结构的实例"><a href="#创建中间件结构的实例" class="headerlink" title="创建中间件结构的实例"></a>创建中间件结构的实例</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">authMiddleware := &amp;jwt.GinJWTMiddleware&#123;</span><br><span class="line">  Realm:      <span class="string">"test zone"</span>,</span><br><span class="line">  Key:        []<span class="keyword">byte</span>(<span class="string">"secret key"</span>),</span><br><span class="line">  Timeout:    time.Hour,</span><br><span class="line">  MaxRefresh: time.Hour,</span><br><span class="line">IdentityHandler: <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span> <span class="title">interface</span></span>&#123;&#125; &#123;</span><br><span class="line">claims := jwt.ExtractClaims(c)</span><br><span class="line"><span class="keyword">return</span> &amp;User&#123;</span><br><span class="line">UserName: claims[<span class="string">"id"</span>].(<span class="keyword">string</span>),</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>gin-jwt 中间件是附属于 <code>GinJWTMiddleware</code>  结构的方法，要使用中间件，必须先创建实例</li></ul><p><a name="c11d496f"></a></p><h3 id="调用-LoginHandler"><a href="#调用-LoginHandler" class="headerlink" title="调用 LoginHandler"></a>调用 LoginHandler</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r.POST(<span class="string">"/login"</span>, authMiddleware.LoginHandler)</span><br></pre></td></tr></table></figure><ul><li><code>LoginHandler</code> 负责根据用户登录时返回的标示符创建 token，它与用户身份一一对应，是 JWT 验证的前提</li></ul><p><a name="LoginHandler"></a></p><h4 id="LoginHandler"><a href="#LoginHandler" class="headerlink" title="LoginHandler"></a>LoginHandler</h4><p>初始化中间件默认设置<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> err := mw.MiddlewareInit(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">mw.unauthorized(c, http.StatusInternalServerError, mw.HTTPStatusMessageFunc(err, c))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>调用 <code>Authenticator</code>  在用户首次登录时获取标示符<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data, error := mw.Authenticator(c)</span><br></pre></td></tr></table></figure></p><p>创建 token<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Create the token</span></span><br><span class="line">token := jwt.New(jwt.GetSigningMethod(mw.SigningAlgorithm))</span><br><span class="line">claims := token.Claims.(jwt.MapClaims)</span><br></pre></td></tr></table></figure></p><p>调用 <code>PayloadFunc</code> ，向 token 中添加用户标示符<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> key, value := <span class="keyword">range</span> mw.PayloadFunc(data) &#123;</span><br><span class="line">claims[key] = value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><a name="56709278"></a></p><h3 id="通过-Use-将-MiddlewareFunc-注册给路由"><a href="#通过-Use-将-MiddlewareFunc-注册给路由" class="headerlink" title="通过 Use 将 MiddlewareFunc 注册给路由"></a>通过 Use 将 MiddlewareFunc 注册给路由</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">auth.Use(authMiddleware.MiddlewareFunc()) &#123;</span><br><span class="line">  auth.GET(<span class="string">"/hello"</span>, helloHandler)</span><br><span class="line">  auth.GET(<span class="string">"/refresh_token"</span>, authMiddleware.RefreshHandler)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>gin-jwt 作为 Gin 中间件，需要通过 Use 才能全局使用；它也是进行验证的模块</li></ul><p><a name="MiddlewareFunc"></a></p><h4 id="MiddlewareFunc"><a href="#MiddlewareFunc" class="headerlink" title="MiddlewareFunc"></a>MiddlewareFunc</h4><p>初始化中间件默认设置<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> err := mw.MiddlewareInit(); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">mw.unauthorized(c, http.StatusInternalServerError, mw.HTTPStatusMessageFunc(err, <span class="literal">nil</span>))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>调用 <code>middlewareImpl</code><br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mw.middlewareImpl(c)</span><br></pre></td></tr></table></figure></p><ul><li>上面只是初始化中间件的默认设置，下一步的验证肯定是在这个函数中进行的</li></ul><p><a name="middlewareImpl"></a></p><h4 id="middlewareImpl"><a href="#middlewareImpl" class="headerlink" title="middlewareImpl"></a>middlewareImpl</h4><p>解析出 token<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">token, err := mw.parseToken(c)</span><br></pre></td></tr></table></figure></p><p>调用 <code>IdentityHandler</code> ，从 token 中获取用户标示符，并将其放入到 Context<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id := mw.IdentityHandler(claims)</span><br></pre></td></tr></table></figure></p><ul><li>用户标示符是唯一直接标明用户身份的</li></ul><p><a name="380cf2b5"></a></p><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><p><a name="c847d8a6"></a></p><h3 id="定义结构体实例"><a href="#定义结构体实例" class="headerlink" title="定义结构体实例"></a>定义结构体实例</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">JWTMiddleware = &amp;jwt.GinJWTMiddleware&#123;</span><br><span class="line">Realm:   <span class="string">"Template"</span>,</span><br><span class="line">Key:     []<span class="keyword">byte</span>(<span class="string">"hydra"</span>),</span><br><span class="line">Timeout: <span class="number">24</span> * time.Hour,</span><br><span class="line">&#125;</span><br><span class="line">a.ExtendJWTMiddleWare(JWTMiddleware)</span><br><span class="line"></span><br><span class="line"><span class="comment">//ExtendJWTMiddleWare 将其中一些字段沉降，对外部不可见，不需要进行验证时，就不用设置这些字段</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Controller)</span> <span class="title">ExtendJWTMiddleWare</span><span class="params">(JWTMiddleware *ginjwt.GinJWTMiddleware)</span></span>  &#123;</span><br><span class="line">JWTMiddleware.Authenticator = <span class="function"><span class="keyword">func</span><span class="params">(ctx *gin.Context)</span> <span class="params">(<span class="keyword">interface</span>&#123;&#125;, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> c.Login(ctx)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="1accf61e"></a></p><h3 id="设置登录并返回用户标示符"><a href="#设置登录并返回用户标示符" class="headerlink" title="设置登录并返回用户标示符"></a>设置登录并返回用户标示符</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Controller)</span> <span class="title">Login</span><span class="params">(ctx *gin.Context)</span> <span class="params">(<span class="keyword">uint32</span>, error)</span></span> &#123;</span><br><span class="line"> <span class="comment">//...</span></span><br><span class="line"><span class="keyword">return</span> ID, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="348a92ad"></a></p><h3 id="在程序中使用中间件"><a href="#在程序中使用中间件" class="headerlink" title="在程序中使用中间件"></a>在程序中使用中间件</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">router.POST(<span class="string">"/api/v1/admin/login"</span>, JWTMiddleware.LoginHandler)</span><br><span class="line"></span><br><span class="line">router.Use(<span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">JWTMiddleware.MiddlewareFunc()(c)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JWT使用总结&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>HTTP</title>
    <link href="https://yangchengkai1.github.io/2019/02/18/HTTP/"/>
    <id>https://yangchengkai1.github.io/2019/02/18/HTTP/</id>
    <published>2019-02-18T02:06:06.000Z</published>
    <updated>2019-08-02T01:44:13.773Z</updated>
    
    <content type="html"><![CDATA[<p>关于 HTTP 协议下的 C/S 模型的简单描述<br><a id="more"></a> </p><p>PC 早于移动端出现，而在 PC 时代，网站协议大多数采用 HTTP 协议，HTTP 在多年的发展过程中奠定了它在网络协议中的地位。即使到了移动端发达的现在，大多数情况也不得不采用 HTTP 协议，而采用 HTTP 协议就决定了要使用 C/S 模型</p><p>对于不包括 WebSocket 的 Web，简单来说就是，客户端发送请求，服务器接收并作出回复。服务器有不同的种类，包括雅虎，百度，谷歌等等，服务器可以有不同的云厂商，而客户端也会有不同的请求。这就产生了各种不同情况，但是，对于同一个请求，服务器经过处理后，应该有确定的回复，上面所说的是出于技术需求所建立的模型，而出于业务的需求，则需要加上数据库，接下来就要更新一下模型了。</p><p>客户端发出请求，那么第一步应该是先要接收到它，这个是由 http.Server 完成的。当服务器接收到请求之后，路由会对其进行识别并分发，接下来交由 Handler 处理。Handler 的本质上就是对于请求的处理。接下来根据数据在谁手里可以分为两种情况，数据在自己手里对应传统的数据库开发；另一种是数据在云端服务器，通过调用 API，发送请求获得数据，操作之后作出回复/响应，这是未来的趋势，服务上云。</p><p>为了降低研发成本，引入了框架，它提供了规范性，降低了团队之间的沟通成本，也包括内部的沟通。</p><p>在此，说明一下个人对于中间件的理解，其实也是对于变与不变的一个角度，举例来说，QQ 的一些具体功能，和某个好友聊天，更改个人信息，这些是不同的功能，即不同的 URL，对应不同的 Hnadler 。通过路由分发不同的请求到相应的 handler ，路由处理变化的方面。以上是在你登陆的前提下的实现，这个就涉及到身份认证，认证模块的实现对于前面的不同功能是无差别的，即为不变。在变的前提下找到不变的点，而不变的点用中间件处理。采取中间件处理不变的方面也是实践过程的一个必然结果。</p><p>再举一个例子，所有情况下，对于程序崩溃的处理应该是一致的，那么这一部分可以放入中间件实现。那么是不是可以理解成，中间件处理的是不同情况导致的统一结果。变与不变是相对来说的，如果你不能证明它不变，那么它就是变的，或者说有变的可能。</p><p>可以根据不同的需求决定中间件所处的位置，上面的情况是将中间件前置，如果要对 resp 的数据做个性化处理，后置就比较合适了。</p><p>总结所用到的方法论：<br>需求—-&gt;问题—-&gt;解决方案<br>等价：简化—&gt;还原<br>中间件，解耦</p><p><a href="https://cdn.nlark.com/yuque/0/2019/jpeg/233513/1550389448917-2f9f4181-127a-4d26-b93f-6d5092c957aa.jpeg" target="_blank" rel="noopener">HTTP</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于 HTTP 协议下的 C/S 模型的简单描述&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://yangchengkai1.github.io/2019/02/06/hello-world/"/>
    <id>https://yangchengkai1.github.io/2019/02/06/hello-world/</id>
    <published>2019-02-06T13:07:13.906Z</published>
    <updated>2019-04-16T07:47:22.574Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a> <h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
